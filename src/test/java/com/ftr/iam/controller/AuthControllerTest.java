package com.ftr.iam.controller;

import com.ftr.iam.controller.response.AuthResponse;
import com.ftr.iam.controller.response.ErrorResponse;
import com.ftr.iam.controller.response.Response;
import com.ftr.iam.dto.AuthDto;
import com.ftr.iam.dto.LoginRequest;
import com.ftr.iam.dto.RegisterRequest;
import com.ftr.iam.service.AuthService;
import com.ftr.iam.service.JwtService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.http.MediaType;
import org.springframework.test.context.bean.override.mockito.MockitoBean;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;

@WebMvcTest(AuthController.class)
@AutoConfigureMockMvc(addFilters = false)
class AuthControllerTest {
    // NOTE: All code in here was generated by Cursor to get working quickly.
    //          Open to improvements gladly :)
    // TODO: Update internalServerError to 400 checks when error handling is improved

    @Autowired
    private MockMvc mockMvc;

    @MockitoBean
    private AuthService authService;

    @MockitoBean
    private JwtService jwtService;

    @Autowired
    private ObjectMapper objectMapper;

    private RegisterRequest validRegisterRequest;
    private LoginRequest validLoginRequest;
    private AuthDto authDto;

    private final String TEST_USER = "testUser";
    private final String TEST_EMAIL = "test@ftr.com";
    private final String TEST_MESSAGE = "test message";
    private final String TEST_PASSWORD = "password123";

    @BeforeEach
    void setUp() {
        validRegisterRequest = new RegisterRequest();
        validRegisterRequest.setUsername(TEST_USER);
        validRegisterRequest.setEmail(TEST_EMAIL);
        validRegisterRequest.setPassword(TEST_PASSWORD);

        validLoginRequest = new LoginRequest();
        validLoginRequest.setUsername(TEST_USER);
        validLoginRequest.setPassword(TEST_PASSWORD);

        createAuthDto();
    }

    // ========== REGISTER TESTS ==========

    @Test
    void register_ValidRequest_ReturnsSuccess() throws Exception {
        when(authService.register(any(RegisterRequest.class))).thenReturn(authDto);

        mockMvc.perform(post("/api/iam/auth/register").with(csrf())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(validRegisterRequest)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.username").value(TEST_USER))
                .andExpect(jsonPath("$.data.email").value(TEST_EMAIL))
                .andExpect(jsonPath("$.data.message").value(TEST_MESSAGE));
    }

    @Test
    void register_InvalidRequest_MissingUsername_ReturnsBadRequest() throws Exception {
        RegisterRequest invalidRequest = new RegisterRequest();
        invalidRequest.setEmail(TEST_EMAIL);
        invalidRequest.setPassword(TEST_PASSWORD);

        mockMvc.perform(post("/api/iam/auth/register").with(csrf())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(invalidRequest)))
                .andExpect(status().isInternalServerError());
    }

    @Test
    void register_InvalidRequest_InvalidEmail_ReturnsBadRequest() throws Exception {
        RegisterRequest invalidRequest = new RegisterRequest();
        invalidRequest.setUsername(TEST_USER);
        invalidRequest.setEmail("invalid-email");
        invalidRequest.setPassword(TEST_PASSWORD);

        mockMvc.perform(post("/api/iam/auth/register").with(csrf())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(invalidRequest)))
                .andExpect(status().isInternalServerError());
    }

    @Test
    void register_InvalidRequest_ShortPassword_ReturnsBadRequest() throws Exception {
        RegisterRequest invalidRequest = new RegisterRequest();
        invalidRequest.setUsername(TEST_USER);
        invalidRequest.setEmail(TEST_EMAIL);
        invalidRequest.setPassword("123"); // Too short, will throw error

        mockMvc.perform(post("/api/iam/auth/register").with(csrf())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(invalidRequest)))
                .andExpect(status().isInternalServerError());
    }

    @Test
    void register_UsernameAlreadyExists_ReturnsBadRequest() throws Exception {
        when(authService.register(any(RegisterRequest.class))).thenReturn(authDto);

        mockMvc.perform(post("/api/iam/auth/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(validRegisterRequest)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.message").value(TEST_MESSAGE));
    }

    @Test
    void register_EmailAlreadyExists_ReturnsBadRequest() throws Exception {
        when(authService.register(any(RegisterRequest.class))).thenReturn(authDto);

        mockMvc.perform(post("/api/iam/auth/register").with(csrf())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(validRegisterRequest)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.username").value(TEST_USER));
    }

    // ========== LOGIN TESTS ==========

    @Test
    void login_ValidRequest_ReturnsSuccessWithToken() throws Exception {
        when(authService.login(any(LoginRequest.class))).thenReturn("mock.jwt.token");

        mockMvc.perform(post("/api/iam/auth/login").with(csrf())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(validLoginRequest)))
                .andExpect(status().isOk())
                .andExpect(header().string("Authorization", "Bearer mock.jwt.token"))
                .andExpect(jsonPath("$.message").value("Generated token for given user"));
    }

    @Test
    void login_InvalidRequest_MissingUsername_ReturnsBadRequest() throws Exception {
        LoginRequest invalidRequest = new LoginRequest();
        invalidRequest.setPassword(TEST_PASSWORD);

        mockMvc.perform(post("/api/iam/auth/login").with(csrf())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(invalidRequest)))
                .andExpect(status().isInternalServerError());
    }

    @Test
    void login_InvalidRequest_MissingPassword_ReturnsBadRequest() throws Exception {
        LoginRequest invalidRequest = new LoginRequest();
        invalidRequest.setUsername(TEST_USER);

        mockMvc.perform(post("/api/iam/auth/login").with(csrf())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(invalidRequest)))
                .andExpect(status().isInternalServerError());
    }

    @Test
    void login_InvalidCredentials_ReturnsBadRequest() throws Exception {
        when(authService.login(any(LoginRequest.class))).thenReturn(null);

        mockMvc.perform(post("/api/iam/auth/login").with(csrf())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(validLoginRequest)))
                .andExpect(status().isOk())
                .andExpect(header().string("Authorization", "Bearer null"));
    }

    @Test
    void login_UserNotFound_ReturnsBadRequest() throws Exception {
        when(authService.login(any(LoginRequest.class))).thenReturn(null);

        mockMvc.perform(post("/api/iam/auth/login").with(csrf())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(validLoginRequest)))
                .andExpect(status().isOk())
                .andExpect(header().string("Authorization", "Bearer null"));
    }

    // ========== EDGE CASES ==========

    @Test
    void register_EmptyRequestBody_ReturnsBadRequest() throws Exception {
        mockMvc.perform(post("/api/iam/auth/register").with(csrf())
                .contentType(MediaType.APPLICATION_JSON)
                .content("{}"))
                .andExpect(status().isInternalServerError());
    }

    @Test
    void login_EmptyRequestBody_ReturnsBadRequest() throws Exception {
        mockMvc.perform(post("/api/iam/auth/login").with(csrf())
                .contentType(MediaType.APPLICATION_JSON)
                .content("{}"))
                .andExpect(status().isInternalServerError());
    }

    @Test
    void register_InvalidJson_ReturnsBadRequest() throws Exception {
        mockMvc.perform(post("/api/iam/auth/register").with(csrf())
                .contentType(MediaType.APPLICATION_JSON)
                .content("{invalid json}"))
                .andExpect(status().isInternalServerError());
    }

    @Test
    void login_InvalidJson_ReturnsBadRequest() throws Exception {
        mockMvc.perform(post("/api/iam/auth/login").with(csrf())
                .contentType(MediaType.APPLICATION_JSON)
                .content("{invalid json}"))
                .andExpect(status().isInternalServerError());
    }
    
    private void createAuthDto() {
        authDto = new AuthDto();
        authDto.setUsername(TEST_USER);
        authDto.setEmail(TEST_EMAIL);
        authDto.setMessage(TEST_MESSAGE);
    }
} 